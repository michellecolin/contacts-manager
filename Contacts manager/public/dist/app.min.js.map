{"version":3,"sources":["app/app.ts","app/service.ts","contact/contact.ts","contact-view/contact-view.ts","contacts/contacts.ts","teste/teste.ts","templates.ts"],"names":["app","routeConfig","$routeProvider","when","templateUrl","controller","main","angular","module","config","$inject","AppCtrl","console","log","Contact","id","image","name","nickname","methods","this","contact","contact_1","AppService","contacts","type","icon","value","methodsOptions","prototype","getContact","find","getContacts","getMethodsOptions","saveContact","push","updateContact","ctc","removeContact","splice","service","ContactCtrl","appService","$location","SweetAlert","$routeParams","methodsAreValid","editMode","onFileSelect","$files","save","methodsValid","swal","title","text","path","method","valid","length","forEach","addMethod","removeMethod","index","ContactViewCtrl","ContactsCtrl","sorting","propertyName","reverse","sortBy","load","_this","showCancelButton","confirmButtonText","closeOnConfirm","isConfirm","teste","TesteCtrl","getExcited","run","$templateCache","put"],"mappings":"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","file":"app.min.js","sourcesContent":["/// <reference path=\"../../../typings/index.d.ts\" />\n\nmodule app {\n    let main = angular.module('contactsManagerApp', [\n        'app.templates',\n        'ngRoute',\n        'ngFileUpload',\n        'oitozero.ngSweetAlert'\n    ]);\n\n    //routes\n    main.config(routeConfig);\n    routeConfig.$inject = ['$routeProvider'];\n    function routeConfig($routeProvider: ng.route.IRouteProvider): void {\n        $routeProvider\n        .when('/contacts', {\n            templateUrl: \"app-templates/contacts/contacts.html\",\n            controller: \"ContactsCtrl as vm\"\n        })\n        .when('/contact', {\n            templateUrl: \"app-templates/contact/contact.html\",\n            controller: \"ContactCtrl as vm\"\n        })\n        .when('/contact/:id', {\n            templateUrl: \"app-templates/contact/contact.html\",\n            controller: \"ContactCtrl as vm\"\n        })\n        .when('/contact/view/:id', {\n            templateUrl: \"app-templates/contact-view/contact-view.html\",\n            controller: \"ContactViewCtrl as vm\"\n        })\n        //.otherwise(\"/contacts\");\n    }\n\n\n    //App controller\n    class AppCtrl {\n        constructor() {\n            console.log('app controller');\n        }\n    }\n    main.controller('AppCtrl', AppCtrl);\n\n\n    //models\n    interface IContact {\n        id: number,\n        image: any;\n        name: string;\n        nickname: string;\n        methods: any[];\n      }\n    \n    export class Contact implements IContact {\n        constructor(\n            public id: number,\n            public image: any,\n            public name: string,\n            public nickname: string,\n            public methods: any[]\n        ) {}\n    }\n}","/// <reference path=\"../../../typings/index.d.ts\" />\n\nmodule app.contact {\n\n  export class AppService {\n    contacts;\n    methodsOptions;\n\n    constructor() {\n      this.contacts = [\n        new Contact(1, 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRLyHTmJslVAT8rHW944V99fG7ivLdmPFGOOw6rKJ4HXiURG6i1', 'michelle', 'mih', [{type: {id: 2, name: \"Whatsapp\", icon: \"fab fa-whatsapp\"}, value: 0848498489}]),\n        new Contact(2, 'https://img.huffingtonpost.com/asset/5c6ab0092500003502c88ce6.jpeg?cache=Idejm45rNe&ops=scalefit_630_noupscale', 'joana', 'jÃ´', [{type: {id: 2, name: \"Whatsapp\", icon: \"fab fa-whatsapp\"}, value: 0848498489}]),\n        new Contact(3, 'https://www.homemalpha.com.br/wp-content/uploads/2011/08/Homem-confiante.jpg', 'mateus', 'mat', [{type: {id: 2, name: \"Whatsapp\", icon: \"fab fa-whatsapp\"}, value: 0848498489}])\n      ];\n\n      this.methodsOptions = [\n        {id: 1, name: 'Phone', icon: 'fas fa-phone'},\n        {id: 2, name: 'Whatsapp', icon: 'fab fa-whatsapp'},\n        {id: 3, name: 'Email', icon: 'fas fa-at'},\n        {id: 4, name: 'Facebook', icon: 'fab fa-facebook-f'}\n      ];\n\n    }\n\n    getContact(id) {\n      return this.contacts.find(contact => {\n        return contact.id == id;\n      });\n    }\n\n    getContacts() {\n      return this.contacts;\n    }\n\n    getMethodsOptions() {\n      return this.methodsOptions;\n    }\n\n    saveContact(contact) {\n      contact.id = 10;\n      this.contacts.push(contact);\n\n      console.log(this.contacts);\n    }\n\n    updateContact(contact) {\n      this.contacts.find(ctc => {\n        if (ctc.id === contact.id) {\n          ctc = contact;\n        }\n      });\n    }\n\n    removeContact(id) {\n      this.contacts.splice(id, 1);\n    }\n  }\n\n  angular\n    .module('contactsManagerApp')\n    .service('AppService', AppService)\n}","/// <reference path=\"../../../typings/index.d.ts\" />\n\nmodule app.contact {\n    export class ContactCtrl {\n        contact: Contact;\n        methodsOptions: any[];\n        methods: any[];\n        methodsAreValid: boolean = true;\n        editMode: boolean = false;\n           \n        static $inject = ['AppService', '$location', 'SweetAlert', '$routeParams'];\n        constructor(\n            public appService: AppService,\n            public $location: ng.ILocationService,\n            public SweetAlert: SweetAlert,\n            public $routeParams: ng.route.IRouteParamsService\n        ) {\n            if (this.$routeParams && this.$routeParams.id) {\n                this.contact = this.appService.getContact(this.$routeParams.id);\n                this.methods = this.contact.methods;\n                this.editMode = true;\n            } else {\n                this.methods = [{type: null, value: null}];\n            }\n            this.methodsOptions = this.appService.getMethodsOptions();\n        }\n\n\n        onFileSelect($files) {\n            this.contact.image = $files[0];\n            /*\n            Upload.upload({\n                url: 'my/upload/url',\n                file: $files,            \n            }).progress(function(e) {\n            }).then(function(data, status, headers, config) {\n                // file is uploaded successfully\n                console.log(data);\n            }); */\n        }\n\n        save() {\n            if (this.contact && this.contact.name && this.methodsValid()) {\n                this.contact.methods = this.methods;\n                if (this.editMode) {\n                    this.appService.updateContact(this.contact);\n                } else {\n                    this.appService.saveContact(this.contact);\n                }\n                this.SweetAlert.swal({\n                    title: 'Contact saved!',\n                    text: 'Contact saved successfully.',\n                    type: 'success'\n                });\n                this.$location.path('/contacts');\n            } else {\n                if (!this.contact || !this.contact.name) {\n                    this.SweetAlert.swal({\n                        title: 'Name field is required!',\n                        text: 'You need to fill out the name filed.',\n                        type: 'error'\n                    }); \n                } else if (!this.methodsAreValid) {\n                    this.SweetAlert.swal({\n                        title: 'Contact methods are incorrect!',\n                        text: 'You\\'ve filled out the contact methods incorrectly. Check them and try again!',\n                        type: 'error'\n                    }); \n                }\n            }\n        }\n\n        methodsValid(method = null) {\n            if (method) { method.value = null};\n\n            let valid = true;\n            if (this.methods.length > 0) {\n                this.methods.forEach(method => {\n                    if (!method.type || !method.value) {\n                        valid = false;\n                    }\n                });\n            } \n\n            this.methodsAreValid = valid;\n            return valid;\n        }\n\n        addMethod() {\n            this.methods.push({type: null, value: null});\n        }\n\n        removeMethod(index) {\n            this.methods.splice(index, 1);\n            this.methodsValid();\n        }\n    }\n\n    angular\n        .module('contactsManagerApp')\n        .controller('ContactCtrl', ContactCtrl)\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\nmodule app.contact {\n  export class ContactViewCtrl {\n      contact: Contact;\n      methodsOptions: any[];\n\n      static $inject = ['AppService', '$location'];\n      constructor(\n          public appService: AppService,\n          public $location: ng.ILocationService\n      ) {\n        this.methodsOptions = this.appService.getMethodsOptions();\n        this.contact = new Contact(4, 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRLyHTmJslVAT8rHW944V99fG7ivLdmPFGOOw6rKJ4HXiURG6i1', 'michelle', 'mih', [])\n      }\n\n\n      onFileSelect($files) {\n          this.contact.image = $files[0];\n          /*\n          Upload.upload({\n              url: 'my/upload/url',\n              file: $files,            \n          }).progress(function(e) {\n          }).then(function(data, status, headers, config) {\n              // file is uploaded successfully\n              console.log(data);\n          }); */\n      }\n\n      save() {\n          if (this.contact && this.contact.name) {\n              this.appService.saveContact(this.contact);\n              this.$location.path('/contacts');\n          }\n      }\n  }\n\n  angular\n      .module('contactsManagerApp')\n      .controller('ContactViewCtrl', ContactViewCtrl)\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\nmodule app.contacts {\n    export class ContactsCtrl {\n        contacts: Contact[];\n        sorting: {} = {\n            propertyName: 'name',\n            reverse: false\n        };\n        \n        static $inject = ['AppService', 'SweetAlert'];\n        constructor(\n            public appService: AppService,\n            public SweetAlert: SweetAlert\n        ) {\n            this.load();\n        }\n\n        load() {\n            this.contacts = this.appService.getContacts();\n        }\n\n        removeContact(index) {\n            this.SweetAlert.swal(\n                {\n                    title: 'Delete this contact?',\n                    text: 'Are you sure you want to delete this contact?',\n                    type: 'warning',\n                    showCancelButton: true,\n                    confirmButtonText: 'Delete',\n                    closeOnConfirm: false\n                }, \n                (isConfirm) => { \n                    if (isConfirm) {\n                        this.appService.removeContact(index);\n                        this.SweetAlert.swal({\n                            title: 'Contact Removed!',\n                            type: 'success',\n                            text: 'Contact removed successfully.'\n                        });\n                    }\n                });\n        }\n\n        sortBy = function(propertyName) {\n            this.sorting.reverse = (this.sorting.propertyName === propertyName) ? !this.sorting.reverse : false;\n            this.sorting.propertyName = propertyName;\n        };\n    }\n\n\n    angular\n        .module('contactsManagerApp')\n        .controller('ContactsCtrl', ContactsCtrl)\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\nmodule app.teste {\n\n    'use strict';\n\n    export class TesteCtrl {\n        constructor(){\n            console.log('lalala');\n        }\n        getExcited: boolean = false;\n    }\n\n\n    angular\n        .module('contactsManagerApp')\n        .controller('TesteCtrl', TesteCtrl)\n}\n",null]}